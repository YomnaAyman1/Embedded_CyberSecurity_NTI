
Secure_Diagnostics_LCD_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000095c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00800060  0000095c  000009f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001ff  008000de  008000de  00000a6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000aa0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d9b  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cae  00000000  00000000  00002a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001520  00000000  00000000  000036ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00004c10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000092a  00000000  00000000  00004fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c87  00000000  00000000  000058de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00006565  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 b2 03 	jmp	0x764	; 0x764 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3d       	cpi	r26, 0xDE	; 222
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	ae ed       	ldi	r26, 0xDE	; 222
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3d       	cpi	r26, 0xDD	; 221
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 ac 04 	jmp	0x958	; 0x958 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
extern u8 arr_index;
extern u8 currnt ;
int secureFlag=0;
int checkkeyflag=1;
int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <main+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	unsigned char values[4] = {6,8,2,6} ;
  9e:	86 e0       	ldi	r24, 0x06	; 6
  a0:	89 83       	std	Y+1, r24	; 0x01
  a2:	98 e0       	ldi	r25, 0x08	; 8
  a4:	9a 83       	std	Y+2, r25	; 0x02
  a6:	92 e0       	ldi	r25, 0x02	; 2
  a8:	9b 83       	std	Y+3, r25	; 0x03
  aa:	8c 83       	std	Y+4, r24	; 0x04
	lcd_vidInit();
  ac:	0e 94 11 02 	call	0x422	; 0x422 <lcd_vidInit>
	led_init();
  b0:	0e 94 57 02 	call	0x4ae	; 0x4ae <led_init>
	COM_M_init();
  b4:	0e 94 48 04 	call	0x890	; 0x890 <COM_M_init>
	for (int i=0;i<4;i++)
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0a c0       	rjmp	.+20     	; 0xd2 <main+0x40>
	{
		values[i] = values[i] +'0';
  be:	e1 e0       	ldi	r30, 0x01	; 1
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	ec 0f       	add	r30, r28
  c4:	fd 1f       	adc	r31, r29
  c6:	e8 0f       	add	r30, r24
  c8:	f9 1f       	adc	r31, r25
  ca:	20 81       	ld	r18, Z
  cc:	20 5d       	subi	r18, 0xD0	; 208
  ce:	20 83       	st	Z, r18
{
	unsigned char values[4] = {6,8,2,6} ;
	lcd_vidInit();
	led_init();
	COM_M_init();
	for (int i=0;i<4;i++)
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	84 30       	cpi	r24, 0x04	; 4
  d4:	91 05       	cpc	r25, r1
  d6:	9c f3       	brlt	.-26     	; 0xbe <main+0x2c>
	}
	
	while (1)
	{

		if (msg_isrecieved())
  d8:	0e 94 a9 04 	call	0x952	; 0x952 <msg_isrecieved>
  dc:	88 23       	and	r24, r24
  de:	e1 f3       	breq	.-8      	; 0xd8 <main+0x46>
		{
			lcd_vidSendCmd(_LCD_CLEAR);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 31 01 	call	0x262	; 0x262 <lcd_vidSendCmd>
			mssg_isReceived = FALSE;
  e6:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <mssg_isReceived>
			lcd_vidGotoRowColumn(0,0);
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 bb 01 	call	0x376	; 0x376 <lcd_vidGotoRowColumn>
			if (rx_buffer[0] == '2' && rx_buffer[1] == '7')
  f2:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <rx_buffer>
  f6:	82 33       	cpi	r24, 0x32	; 50
  f8:	09 f0       	breq	.+2      	; 0xfc <main+0x6a>
  fa:	65 c0       	rjmp	.+202    	; 0x1c6 <main+0x134>
  fc:	90 91 ea 00 	lds	r25, 0x00EA	; 0x8000ea <rx_buffer+0x1>
 100:	97 33       	cpi	r25, 0x37	; 55
 102:	09 f0       	breq	.+2      	; 0x106 <main+0x74>
 104:	60 c0       	rjmp	.+192    	; 0x1c6 <main+0x134>
			{
				if (rx_buffer[2] == '0')
 106:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <rx_buffer+0x2>
 10a:	80 33       	cpi	r24, 0x30	; 48
 10c:	29 f7       	brne	.-54     	; 0xd8 <main+0x46>
				{
					if (rx_buffer[3]=='1')
 10e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <rx_buffer+0x3>
 112:	81 33       	cpi	r24, 0x31	; 49
 114:	99 f4       	brne	.+38     	; 0x13c <main+0xaa>
					{
						lcd_vidDisplyStr("6701");
 116:	82 ea       	ldi	r24, 0xA2	; 162
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd_vidDisplyStr>
						lcd_vidDisplyStr(values);
 11e:	ce 01       	movw	r24, r28
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd_vidDisplyStr>
						COM_M_TransmitStr(values);
 126:	ce 01       	movw	r24, r28
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	0e 94 55 04 	call	0x8aa	; 0x8aa <COM_M_TransmitStr>
						checkkeyflag=1;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 136:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 13a:	ce cf       	rjmp	.-100    	; 0xd8 <main+0x46>
					}
					else if (rx_buffer[3] == '2')
 13c:	82 33       	cpi	r24, 0x32	; 50
 13e:	61 f6       	brne	.-104    	; 0xd8 <main+0x46>
 140:	25 c0       	rjmp	.+74     	; 0x18c <main+0xfa>
					{
						int j =0;
						for (int i=4;i<8;i++)
						{
							if (rx_buffer[i] == values[j]+'1'-48)
 142:	fc 01       	movw	r30, r24
 144:	e7 51       	subi	r30, 0x17	; 23
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	60 81       	ld	r22, Z
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	e1 e0       	ldi	r30, 0x01	; 1
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	ec 0f       	add	r30, r28
 152:	fd 1f       	adc	r31, r29
 154:	e4 0f       	add	r30, r20
 156:	f5 1f       	adc	r31, r21
 158:	20 81       	ld	r18, Z
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	2f 5f       	subi	r18, 0xFF	; 255
 15e:	3f 4f       	sbci	r19, 0xFF	; 255
 160:	62 17       	cp	r22, r18
 162:	73 07       	cpc	r23, r19
 164:	39 f4       	brne	.+14     	; 0x174 <main+0xe2>
							{
								secureFlag=1;
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	30 93 df 00 	sts	0x00DF, r19	; 0x8000df <__data_end+0x1>
 16e:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <__data_end>
 172:	08 c0       	rjmp	.+16     	; 0x184 <main+0xf2>
							}
							else
							{
								secureFlag=0;
 174:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <__data_end+0x1>
 178:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <__data_end>
								checkkeyflag=0;
 17c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 180:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
							}
							j++;
 184:	4f 5f       	subi	r20, 0xFF	; 255
 186:	5f 4f       	sbci	r21, 0xFF	; 255
						checkkeyflag=1;
					}
					else if (rx_buffer[3] == '2')
					{
						int j =0;
						for (int i=4;i<8;i++)
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	04 c0       	rjmp	.+8      	; 0x194 <main+0x102>
 18c:	84 e0       	ldi	r24, 0x04	; 4
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	50 e0       	ldi	r21, 0x00	; 0
 194:	88 30       	cpi	r24, 0x08	; 8
 196:	91 05       	cpc	r25, r1
 198:	a4 f2       	brlt	.-88     	; 0x142 <main+0xb0>
								secureFlag=0;
								checkkeyflag=0;
							}
							j++;
						}
						if (secureFlag && checkkeyflag)
 19a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__data_end>
 19e:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <__data_end+0x1>
 1a2:	89 2b       	or	r24, r25
 1a4:	59 f0       	breq	.+22     	; 0x1bc <main+0x12a>
 1a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1aa:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ae:	89 2b       	or	r24, r25
 1b0:	29 f0       	breq	.+10     	; 0x1bc <main+0x12a>
						{
							lcd_vidDisplyStr("6702");
 1b2:	87 ea       	ldi	r24, 0xA7	; 167
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd_vidDisplyStr>
 1ba:	8e cf       	rjmp	.-228    	; 0xd8 <main+0x46>
						}
						else
						{
							lcd_vidDisplyStr("7F 27 35");
 1bc:	8c ea       	ldi	r24, 0xAC	; 172
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd_vidDisplyStr>
 1c4:	89 cf       	rjmp	.-238    	; 0xd8 <main+0x46>
						}
					}
				}
			}
			else if (rx_buffer[0]== '3' && rx_buffer[1] == '1' )
 1c6:	83 33       	cpi	r24, 0x33	; 51
 1c8:	91 f5       	brne	.+100    	; 0x22e <main+0x19c>
 1ca:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <rx_buffer+0x1>
 1ce:	81 33       	cpi	r24, 0x31	; 49
 1d0:	71 f5       	brne	.+92     	; 0x22e <main+0x19c>
			{
				if (rx_buffer[2]=='0' && rx_buffer[3] == '1' &&rx_buffer[4] == 'A' &&rx_buffer[5] == 'A' && rx_buffer[6] == '0'&& rx_buffer[7] == '0' && secureFlag)
 1d2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <rx_buffer+0x2>
 1d6:	80 33       	cpi	r24, 0x30	; 48
 1d8:	11 f5       	brne	.+68     	; 0x21e <main+0x18c>
 1da:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <rx_buffer+0x3>
 1de:	81 33       	cpi	r24, 0x31	; 49
 1e0:	f1 f4       	brne	.+60     	; 0x21e <main+0x18c>
 1e2:	80 91 ed 00 	lds	r24, 0x00ED	; 0x8000ed <rx_buffer+0x4>
 1e6:	81 34       	cpi	r24, 0x41	; 65
 1e8:	d1 f4       	brne	.+52     	; 0x21e <main+0x18c>
 1ea:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <rx_buffer+0x5>
 1ee:	81 34       	cpi	r24, 0x41	; 65
 1f0:	b1 f4       	brne	.+44     	; 0x21e <main+0x18c>
 1f2:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <rx_buffer+0x6>
 1f6:	80 33       	cpi	r24, 0x30	; 48
 1f8:	91 f4       	brne	.+36     	; 0x21e <main+0x18c>
 1fa:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <rx_buffer+0x7>
 1fe:	80 33       	cpi	r24, 0x30	; 48
 200:	71 f4       	brne	.+28     	; 0x21e <main+0x18c>
 202:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <__data_end>
 206:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <__data_end+0x1>
 20a:	89 2b       	or	r24, r25
 20c:	41 f0       	breq	.+16     	; 0x21e <main+0x18c>
				{
					led_on(LED_YELLOW);
 20e:	83 e0       	ldi	r24, 0x03	; 3
 210:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <led_on>
					lcd_vidDisplyStr("7101AA00");
 214:	85 eb       	ldi	r24, 0xB5	; 181
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd_vidDisplyStr>
 21c:	5d cf       	rjmp	.-326    	; 0xd8 <main+0x46>
				}
				else
				{
					lcd_vidDisplyStr("7F 31 33");
 21e:	8e eb       	ldi	r24, 0xBE	; 190
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd_vidDisplyStr>
					led_off(LED_YELLOW);
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	0e 94 84 02 	call	0x508	; 0x508 <led_off>
 22c:	55 cf       	rjmp	.-342    	; 0xd8 <main+0x46>
				}

			}
			else
			{
				lcd_vidDisplyStr("invalid command");
 22e:	87 ec       	ldi	r24, 0xC7	; 199
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 da 01 	call	0x3b4	; 0x3b4 <lcd_vidDisplyStr>
 236:	50 cf       	rjmp	.-352    	; 0xd8 <main+0x46>

00000238 <enablePulse>:
* \Return value:   : None                                 
*******************************************************************************/

static void enablePulse(void)
{
	dio_vidWriteChannel(LCD_EN_PORT, LCD_EN_CHANNEL, STD_HIGH);
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	62 e0       	ldi	r22, 0x02	; 2
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 09 03 	call	0x612	; 0x612 <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	85 e0       	ldi	r24, 0x05	; 5
 244:	8a 95       	dec	r24
 246:	f1 f7       	brne	.-4      	; 0x244 <enablePulse+0xc>
 248:	00 00       	nop
	_delay_us(1);
	dio_vidWriteChannel(LCD_EN_PORT, LCD_EN_CHANNEL, STD_LOW);
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	62 e0       	ldi	r22, 0x02	; 2
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 09 03 	call	0x612	; 0x612 <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 254:	8f e3       	ldi	r24, 0x3F	; 63
 256:	9f e1       	ldi	r25, 0x1F	; 31
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <enablePulse+0x20>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <enablePulse+0x26>
 25e:	00 00       	nop
 260:	08 95       	ret

00000262 <lcd_vidSendCmd>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : cmd	-> LCD command ID                                                                        
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidSendCmd(lcd_cmd_t cmd)
{
 262:	cf 93       	push	r28
 264:	c8 2f       	mov	r28, r24
	/*	RS -> Command Mode	*/
	dio_vidWriteChannel(LCD_RS_PORT,LCD_RS_CHANNEL,STD_LOW);
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	63 e0       	ldi	r22, 0x03	; 3
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 09 03 	call	0x612	; 0x612 <dio_vidWriteChannel>

	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(cmd,4));
 270:	c4 fb       	bst	r28, 4
 272:	44 27       	eor	r20, r20
 274:	40 f9       	bld	r20, 0
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 09 03 	call	0x612	; 0x612 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(cmd,5));
 27e:	c5 fb       	bst	r28, 5
 280:	44 27       	eor	r20, r20
 282:	40 f9       	bld	r20, 0
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 09 03 	call	0x612	; 0x612 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(cmd,6));
 28c:	c6 fb       	bst	r28, 6
 28e:	44 27       	eor	r20, r20
 290:	40 f9       	bld	r20, 0
 292:	62 e0       	ldi	r22, 0x02	; 2
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 09 03 	call	0x612	; 0x612 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(cmd,7));
 29a:	4c 2f       	mov	r20, r28
 29c:	44 1f       	adc	r20, r20
 29e:	44 27       	eor	r20, r20
 2a0:	44 1f       	adc	r20, r20
 2a2:	64 e0       	ldi	r22, 0x04	; 4
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 09 03 	call	0x612	; 0x612 <dio_vidWriteChannel>
	
	enablePulse();
 2aa:	0e 94 1c 01 	call	0x238	; 0x238 <enablePulse>
	
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(cmd,0));
 2ae:	4c 2f       	mov	r20, r28
 2b0:	41 70       	andi	r20, 0x01	; 1
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 09 03 	call	0x612	; 0x612 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(cmd,1));
 2ba:	c1 fb       	bst	r28, 1
 2bc:	44 27       	eor	r20, r20
 2be:	40 f9       	bld	r20, 0
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 09 03 	call	0x612	; 0x612 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(cmd,2));
 2c8:	c2 fb       	bst	r28, 2
 2ca:	44 27       	eor	r20, r20
 2cc:	40 f9       	bld	r20, 0
 2ce:	62 e0       	ldi	r22, 0x02	; 2
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 09 03 	call	0x612	; 0x612 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(cmd,3));
 2d6:	c3 fb       	bst	r28, 3
 2d8:	44 27       	eor	r20, r20
 2da:	40 f9       	bld	r20, 0
 2dc:	64 e0       	ldi	r22, 0x04	; 4
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 09 03 	call	0x612	; 0x612 <dio_vidWriteChannel>
	
	enablePulse();
 2e4:	0e 94 1c 01 	call	0x238	; 0x238 <enablePulse>
}
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <lcd_vidSendData>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : data	-> LCD data input                                                                       
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidSendData(u8 data)
{
 2ec:	cf 93       	push	r28
 2ee:	c8 2f       	mov	r28, r24
	/*	RS -> Data Mode	*/
	dio_vidWriteChannel(LCD_RS_PORT,LCD_RS_CHANNEL,STD_HIGH);
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	63 e0       	ldi	r22, 0x03	; 3
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	0e 94 09 03 	call	0x612	; 0x612 <dio_vidWriteChannel>

	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(data,4));
 2fa:	c4 fb       	bst	r28, 4
 2fc:	44 27       	eor	r20, r20
 2fe:	40 f9       	bld	r20, 0
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 09 03 	call	0x612	; 0x612 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(data,5));
 308:	c5 fb       	bst	r28, 5
 30a:	44 27       	eor	r20, r20
 30c:	40 f9       	bld	r20, 0
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	0e 94 09 03 	call	0x612	; 0x612 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(data,6));
 316:	c6 fb       	bst	r28, 6
 318:	44 27       	eor	r20, r20
 31a:	40 f9       	bld	r20, 0
 31c:	62 e0       	ldi	r22, 0x02	; 2
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	0e 94 09 03 	call	0x612	; 0x612 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(data,7));
 324:	4c 2f       	mov	r20, r28
 326:	44 1f       	adc	r20, r20
 328:	44 27       	eor	r20, r20
 32a:	44 1f       	adc	r20, r20
 32c:	64 e0       	ldi	r22, 0x04	; 4
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 09 03 	call	0x612	; 0x612 <dio_vidWriteChannel>
	
	enablePulse();
 334:	0e 94 1c 01 	call	0x238	; 0x238 <enablePulse>
	
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D4_CHANNEL,CHECK_BIT(data,0));
 338:	4c 2f       	mov	r20, r28
 33a:	41 70       	andi	r20, 0x01	; 1
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	0e 94 09 03 	call	0x612	; 0x612 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D5_CHANNEL,CHECK_BIT(data,1));
 344:	c1 fb       	bst	r28, 1
 346:	44 27       	eor	r20, r20
 348:	40 f9       	bld	r20, 0
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 09 03 	call	0x612	; 0x612 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D6_CHANNEL,CHECK_BIT(data,2));
 352:	c2 fb       	bst	r28, 2
 354:	44 27       	eor	r20, r20
 356:	40 f9       	bld	r20, 0
 358:	62 e0       	ldi	r22, 0x02	; 2
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 09 03 	call	0x612	; 0x612 <dio_vidWriteChannel>
	dio_vidWriteChannel(LCD_D4_PORT,LCD_D7_CHANNEL,CHECK_BIT(data,3));
 360:	c3 fb       	bst	r28, 3
 362:	44 27       	eor	r20, r20
 364:	40 f9       	bld	r20, 0
 366:	64 e0       	ldi	r22, 0x04	; 4
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	0e 94 09 03 	call	0x612	; 0x612 <dio_vidWriteChannel>
	
	enablePulse();
 36e:	0e 94 1c 01 	call	0x238	; 0x238 <enablePulse>
	
}
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <lcd_vidGotoRowColumn>:
					 column -> LCD column ID															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidGotoRowColumn(u8 row, u8 column)
{
	switch (row)
 376:	81 30       	cpi	r24, 0x01	; 1
 378:	59 f0       	breq	.+22     	; 0x390 <lcd_vidGotoRowColumn+0x1a>
 37a:	28 f0       	brcs	.+10     	; 0x386 <lcd_vidGotoRowColumn+0x10>
 37c:	82 30       	cpi	r24, 0x02	; 2
 37e:	69 f0       	breq	.+26     	; 0x39a <lcd_vidGotoRowColumn+0x24>
 380:	83 30       	cpi	r24, 0x03	; 3
 382:	81 f0       	breq	.+32     	; 0x3a4 <lcd_vidGotoRowColumn+0x2e>
 384:	08 95       	ret
	{
	case 0:
		/*	Row 0	*/
		lcd_vidSendCmd(0x80+column);
 386:	80 e8       	ldi	r24, 0x80	; 128
 388:	86 0f       	add	r24, r22
 38a:	0e 94 31 01 	call	0x262	; 0x262 <lcd_vidSendCmd>
		break;
 38e:	08 95       	ret

	case 1:
		/* Row 1 */
		lcd_vidSendCmd(0xC0+column);
 390:	80 ec       	ldi	r24, 0xC0	; 192
 392:	86 0f       	add	r24, r22
 394:	0e 94 31 01 	call	0x262	; 0x262 <lcd_vidSendCmd>
		break;
 398:	08 95       	ret
		
	case 2:
		/* Row 2 */
		lcd_vidSendCmd(0x94+column);
 39a:	84 e9       	ldi	r24, 0x94	; 148
 39c:	86 0f       	add	r24, r22
 39e:	0e 94 31 01 	call	0x262	; 0x262 <lcd_vidSendCmd>
		break;
 3a2:	08 95       	ret
	
	case 3:
		/* Row 3 */
		lcd_vidSendCmd(0xD4+column);
 3a4:	84 ed       	ldi	r24, 0xD4	; 212
 3a6:	86 0f       	add	r24, r22
 3a8:	0e 94 31 01 	call	0x262	; 0x262 <lcd_vidSendCmd>
 3ac:	08 95       	ret

000003ae <lcd_vidDisplyChar>:
* \Parameters (in) : chr	-> ASCI value of character															
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyChar(u8 chr)
{
	lcd_vidSendData(chr);
 3ae:	0e 94 76 01 	call	0x2ec	; 0x2ec <lcd_vidSendData>
 3b2:	08 95       	ret

000003b4 <lcd_vidDisplyStr>:
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : str	-> string to be displayed														
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyStr(u8* str)
{
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	ec 01       	movw	r28, r24
	while (*str != '\0')
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <lcd_vidDisplyStr+0xe>
	{
		lcd_vidDisplyChar(*str);
 3bc:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_vidDisplyChar>
		str++;
 3c0:	21 96       	adiw	r28, 0x01	; 1
* \Parameters (in) : str	-> string to be displayed														
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidDisplyStr(u8* str)
{
	while (*str != '\0')
 3c2:	88 81       	ld	r24, Y
 3c4:	81 11       	cpse	r24, r1
 3c6:	fa cf       	rjmp	.-12     	; 0x3bc <lcd_vidDisplyStr+0x8>
	{
		lcd_vidDisplyChar(*str);
		str++;
	}
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <lcd_vidCustomWrite>:
* \Reentrancy      : Non Reentrant
* \Parameters (in) : None
* \Return value:   : None
*******************************************************************************/
void lcd_vidCustomWrite(void)
{
 3ce:	0f 93       	push	r16
 3d0:	1f 93       	push	r17
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
 3d6:	d0 e0       	ldi	r29, 0x00	; 0
 3d8:	1d c0       	rjmp	.+58     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
	{
		lcd_vidSendCmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
 3da:	0d 2f       	mov	r16, r29
 3dc:	10 e0       	ldi	r17, 0x00	; 0
 3de:	c8 01       	movw	r24, r16
 3e0:	08 96       	adiw	r24, 0x08	; 8
 3e2:	88 0f       	add	r24, r24
 3e4:	88 0f       	add	r24, r24
 3e6:	88 0f       	add	r24, r24
 3e8:	0e 94 31 01 	call	0x262	; 0x262 <lcd_vidSendCmd>
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
 3ec:	c0 e0       	ldi	r28, 0x00	; 0
 3ee:	0f c0       	rjmp	.+30     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		{
			lcd_vidDisplyChar(customChar[loc_CharIndx][loc_ByteIndex]);
 3f0:	f8 01       	movw	r30, r16
 3f2:	ee 0f       	add	r30, r30
 3f4:	ff 1f       	adc	r31, r31
 3f6:	ee 0f       	add	r30, r30
 3f8:	ff 1f       	adc	r31, r31
 3fa:	ee 0f       	add	r30, r30
 3fc:	ff 1f       	adc	r31, r31
 3fe:	ee 59       	subi	r30, 0x9E	; 158
 400:	ff 4f       	sbci	r31, 0xFF	; 255
 402:	ec 0f       	add	r30, r28
 404:	f1 1d       	adc	r31, r1
 406:	80 81       	ld	r24, Z
 408:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_vidDisplyChar>
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
	{
		lcd_vidSendCmd(_LCD_CGRAM_START_ADDRESS +(loc_CharIndx*8));
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
 40c:	cf 5f       	subi	r28, 0xFF	; 255
 40e:	c8 30       	cpi	r28, 0x08	; 8
 410:	78 f3       	brcs	.-34     	; 0x3f0 <lcd_vidCustomWrite+0x22>
void lcd_vidCustomWrite(void)
{
	u8 loc_ByteIndex=0;
	u8 loc_CharIndx=0;
	
	for (loc_CharIndx=0;loc_CharIndx<NO_CSTOM_CHAR;loc_CharIndx++)
 412:	df 5f       	subi	r29, 0xFF	; 255
 414:	d8 30       	cpi	r29, 0x08	; 8
 416:	08 f3       	brcs	.-62     	; 0x3da <lcd_vidCustomWrite+0xc>
		for (loc_ByteIndex =0; loc_ByteIndex<NO_CSTOM_CHAR_BYTES;loc_ByteIndex++)
		{
			lcd_vidDisplyChar(customChar[loc_CharIndx][loc_ByteIndex]);
		}
	}	
}
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	1f 91       	pop	r17
 41e:	0f 91       	pop	r16
 420:	08 95       	ret

00000422 <lcd_vidInit>:
* \Parameters (in) : None                                                                        
* \Return value:   : None                                 
*******************************************************************************/
void lcd_vidInit(void)
{
	dio_vidConfigChannel(LCD_RS_PORT, LCD_RS_CHANNEL, OUTPUT);
 422:	41 e0       	ldi	r20, 0x01	; 1
 424:	63 e0       	ldi	r22, 0x03	; 3
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	0e 94 9c 02 	call	0x538	; 0x538 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_EN_PORT, LCD_EN_CHANNEL, OUTPUT);
 42c:	41 e0       	ldi	r20, 0x01	; 1
 42e:	62 e0       	ldi	r22, 0x02	; 2
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	0e 94 9c 02 	call	0x538	; 0x538 <dio_vidConfigChannel>

	dio_vidConfigChannel(LCD_D4_PORT, LCD_D4_CHANNEL, OUTPUT);
 436:	41 e0       	ldi	r20, 0x01	; 1
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	0e 94 9c 02 	call	0x538	; 0x538 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D5_PORT, LCD_D5_CHANNEL, OUTPUT);
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 9c 02 	call	0x538	; 0x538 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D6_PORT, LCD_D6_CHANNEL, OUTPUT);
 44a:	41 e0       	ldi	r20, 0x01	; 1
 44c:	62 e0       	ldi	r22, 0x02	; 2
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	0e 94 9c 02 	call	0x538	; 0x538 <dio_vidConfigChannel>
	dio_vidConfigChannel(LCD_D7_PORT, LCD_D7_CHANNEL, OUTPUT);
 454:	41 e0       	ldi	r20, 0x01	; 1
 456:	64 e0       	ldi	r22, 0x04	; 4
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	0e 94 9c 02 	call	0x538	; 0x538 <dio_vidConfigChannel>
 45e:	8f e5       	ldi	r24, 0x5F	; 95
 460:	9a ee       	ldi	r25, 0xEA	; 234
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <lcd_vidInit+0x40>
 466:	00 c0       	rjmp	.+0      	; 0x468 <lcd_vidInit+0x46>
 468:	00 00       	nop

	_delay_ms(15);

	lcd_vidSendCmd(0x03);
 46a:	83 e0       	ldi	r24, 0x03	; 3
 46c:	0e 94 31 01 	call	0x262	; 0x262 <lcd_vidSendCmd>
 470:	8f e1       	ldi	r24, 0x1F	; 31
 472:	9e e4       	ldi	r25, 0x4E	; 78
 474:	01 97       	sbiw	r24, 0x01	; 1
 476:	f1 f7       	brne	.-4      	; 0x474 <lcd_vidInit+0x52>
 478:	00 c0       	rjmp	.+0      	; 0x47a <lcd_vidInit+0x58>
 47a:	00 00       	nop
	_delay_ms(5);
	lcd_vidSendCmd(0x03);
 47c:	83 e0       	ldi	r24, 0x03	; 3
 47e:	0e 94 31 01 	call	0x262	; 0x262 <lcd_vidSendCmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 482:	8f e8       	ldi	r24, 0x8F	; 143
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	f1 f7       	brne	.-4      	; 0x486 <lcd_vidInit+0x64>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <lcd_vidInit+0x6a>
 48c:	00 00       	nop
	_delay_us(100);
	lcd_vidSendCmd(0x03);
 48e:	83 e0       	ldi	r24, 0x03	; 3
 490:	0e 94 31 01 	call	0x262	; 0x262 <lcd_vidSendCmd>
	lcd_vidSendCmd(0x02);
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	0e 94 31 01 	call	0x262	; 0x262 <lcd_vidSendCmd>
	lcd_vidSendCmd(_LCD_4BIT_MODE);
 49a:	88 e2       	ldi	r24, 0x28	; 40
 49c:	0e 94 31 01 	call	0x262	; 0x262 <lcd_vidSendCmd>
	lcd_vidCustomWrite();
 4a0:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_vidCustomWrite>
	lcd_vidGotoRowColumn(0, 0);
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	0e 94 bb 01 	call	0x376	; 0x376 <lcd_vidGotoRowColumn>
 4ac:	08 95       	ret

000004ae <led_init>:
* \Return value:   : void  
*                                                                      
*******************************************************************************/
void led_init()
{
	dio_vidConfigChannel(DIO_PORTA,DIO_PIN4,OUTPUT);  //green led
 4ae:	41 e0       	ldi	r20, 0x01	; 1
 4b0:	64 e0       	ldi	r22, 0x04	; 4
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	0e 94 9c 02 	call	0x538	; 0x538 <dio_vidConfigChannel>
	dio_vidConfigChannel(DIO_PORTA,DIO_PIN5,OUTPUT);  //blue led
 4b8:	41 e0       	ldi	r20, 0x01	; 1
 4ba:	65 e0       	ldi	r22, 0x05	; 5
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 9c 02 	call	0x538	; 0x538 <dio_vidConfigChannel>
	dio_vidConfigChannel(DIO_PORTA,DIO_PIN6,OUTPUT);  //yellow led
 4c2:	41 e0       	ldi	r20, 0x01	; 1
 4c4:	66 e0       	ldi	r22, 0x06	; 6
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	0e 94 9c 02 	call	0x538	; 0x538 <dio_vidConfigChannel>
	dio_vidConfigChannel(DIO_PORTB,DIO_PIN7,OUTPUT);  //red led
 4cc:	41 e0       	ldi	r20, 0x01	; 1
 4ce:	67 e0       	ldi	r22, 0x07	; 7
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 9c 02 	call	0x538	; 0x538 <dio_vidConfigChannel>
 4d6:	08 95       	ret

000004d8 <led_on>:
* \Return value:   : void
*
*******************************************************************************/
void led_on(led_id_t ledId)
{
	switch (ledId)
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	51 f0       	breq	.+20     	; 0x4f0 <led_on+0x18>
 4dc:	28 f0       	brcs	.+10     	; 0x4e8 <led_on+0x10>
 4de:	82 30       	cpi	r24, 0x02	; 2
 4e0:	59 f0       	breq	.+22     	; 0x4f8 <led_on+0x20>
 4e2:	83 30       	cpi	r24, 0x03	; 3
 4e4:	69 f0       	breq	.+26     	; 0x500 <led_on+0x28>
 4e6:	08 95       	ret
	{
		case LED_RED:
		SET_BIT(DIO_PORTB_REG,DIO_PIN7);
 4e8:	88 b3       	in	r24, 0x18	; 24
 4ea:	80 68       	ori	r24, 0x80	; 128
 4ec:	88 bb       	out	0x18, r24	; 24
		break;
 4ee:	08 95       	ret

		case LED_GREEN:
		SET_BIT(DIO_PORTA_REG,DIO_PIN4);
 4f0:	8b b3       	in	r24, 0x1b	; 27
 4f2:	80 61       	ori	r24, 0x10	; 16
 4f4:	8b bb       	out	0x1b, r24	; 27
		break;
 4f6:	08 95       	ret

		case LED_BLUE:
		SET_BIT(DIO_PORTA_REG,DIO_PIN5);
 4f8:	8b b3       	in	r24, 0x1b	; 27
 4fa:	80 62       	ori	r24, 0x20	; 32
 4fc:	8b bb       	out	0x1b, r24	; 27
		break;
 4fe:	08 95       	ret

		case LED_YELLOW:
		SET_BIT(DIO_PORTA_REG,DIO_PIN6);
 500:	8b b3       	in	r24, 0x1b	; 27
 502:	80 64       	ori	r24, 0x40	; 64
 504:	8b bb       	out	0x1b, r24	; 27
 506:	08 95       	ret

00000508 <led_off>:
* \Return value:   : void
*
*******************************************************************************/
void led_off(led_id_t ledId)
{
	switch (ledId)
 508:	81 30       	cpi	r24, 0x01	; 1
 50a:	51 f0       	breq	.+20     	; 0x520 <led_off+0x18>
 50c:	28 f0       	brcs	.+10     	; 0x518 <led_off+0x10>
 50e:	82 30       	cpi	r24, 0x02	; 2
 510:	59 f0       	breq	.+22     	; 0x528 <led_off+0x20>
 512:	83 30       	cpi	r24, 0x03	; 3
 514:	69 f0       	breq	.+26     	; 0x530 <led_off+0x28>
 516:	08 95       	ret
	{
		case LED_RED:
		CLEAR_BIT(DIO_PORTB_REG,DIO_PIN7);
 518:	88 b3       	in	r24, 0x18	; 24
 51a:	8f 77       	andi	r24, 0x7F	; 127
 51c:	88 bb       	out	0x18, r24	; 24
		break;
 51e:	08 95       	ret

		case LED_GREEN:
		CLEAR_BIT(DIO_PORTA_REG,DIO_PIN4);
 520:	8b b3       	in	r24, 0x1b	; 27
 522:	8f 7e       	andi	r24, 0xEF	; 239
 524:	8b bb       	out	0x1b, r24	; 27
		break;
 526:	08 95       	ret

		case LED_BLUE:
		CLEAR_BIT(DIO_PORTA_REG,DIO_PIN5);
 528:	8b b3       	in	r24, 0x1b	; 27
 52a:	8f 7d       	andi	r24, 0xDF	; 223
 52c:	8b bb       	out	0x1b, r24	; 27
		break;
 52e:	08 95       	ret

		case LED_YELLOW:
		CLEAR_BIT(DIO_PORTA_REG,DIO_PIN6);
 530:	8b b3       	in	r24, 0x1b	; 27
 532:	8f 7b       	andi	r24, 0xBF	; 191
 534:	8b bb       	out	0x1b, r24	; 27
 536:	08 95       	ret

00000538 <dio_vidConfigChannel>:
					 direction -> MC channel direction
* \Return value:   : None                            
*******************************************************************************/
void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
 538:	81 30       	cpi	r24, 0x01	; 1
 53a:	01 f1       	breq	.+64     	; 0x57c <dio_vidConfigChannel+0x44>
 53c:	30 f0       	brcs	.+12     	; 0x54a <dio_vidConfigChannel+0x12>
 53e:	82 30       	cpi	r24, 0x02	; 2
 540:	b1 f1       	breq	.+108    	; 0x5ae <dio_vidConfigChannel+0x76>
 542:	83 30       	cpi	r24, 0x03	; 3
 544:	09 f4       	brne	.+2      	; 0x548 <dio_vidConfigChannel+0x10>
 546:	4c c0       	rjmp	.+152    	; 0x5e0 <dio_vidConfigChannel+0xa8>
 548:	08 95       	ret
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
 54a:	41 30       	cpi	r20, 0x01	; 1
 54c:	59 f4       	brne	.+22     	; 0x564 <dio_vidConfigChannel+0x2c>
		{
			SET_BIT (DIO_DDRA_REG,channel);
 54e:	2a b3       	in	r18, 0x1a	; 26
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	02 c0       	rjmp	.+4      	; 0x55a <dio_vidConfigChannel+0x22>
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	6a 95       	dec	r22
 55c:	e2 f7       	brpl	.-8      	; 0x556 <dio_vidConfigChannel+0x1e>
 55e:	82 2b       	or	r24, r18
 560:	8a bb       	out	0x1a, r24	; 26
 562:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
 564:	2a b3       	in	r18, 0x1a	; 26
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	02 c0       	rjmp	.+4      	; 0x570 <dio_vidConfigChannel+0x38>
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	6a 95       	dec	r22
 572:	e2 f7       	brpl	.-8      	; 0x56c <dio_vidConfigChannel+0x34>
 574:	80 95       	com	r24
 576:	82 23       	and	r24, r18
 578:	8a bb       	out	0x1a, r24	; 26
 57a:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
 57c:	41 30       	cpi	r20, 0x01	; 1
 57e:	59 f4       	brne	.+22     	; 0x596 <dio_vidConfigChannel+0x5e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
 580:	27 b3       	in	r18, 0x17	; 23
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	02 c0       	rjmp	.+4      	; 0x58c <dio_vidConfigChannel+0x54>
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	6a 95       	dec	r22
 58e:	e2 f7       	brpl	.-8      	; 0x588 <dio_vidConfigChannel+0x50>
 590:	82 2b       	or	r24, r18
 592:	87 bb       	out	0x17, r24	; 23
 594:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
 596:	27 b3       	in	r18, 0x17	; 23
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <dio_vidConfigChannel+0x6a>
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	6a 95       	dec	r22
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <dio_vidConfigChannel+0x66>
 5a6:	80 95       	com	r24
 5a8:	82 23       	and	r24, r18
 5aa:	87 bb       	out	0x17, r24	; 23
 5ac:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
 5ae:	41 30       	cpi	r20, 0x01	; 1
 5b0:	59 f4       	brne	.+22     	; 0x5c8 <dio_vidConfigChannel+0x90>
		{
			SET_BIT (DIO_DDRC_REG,channel);
 5b2:	24 b3       	in	r18, 0x14	; 20
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <dio_vidConfigChannel+0x86>
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	6a 95       	dec	r22
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <dio_vidConfigChannel+0x82>
 5c2:	82 2b       	or	r24, r18
 5c4:	84 bb       	out	0x14, r24	; 20
 5c6:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 5c8:	24 b3       	in	r18, 0x14	; 20
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <dio_vidConfigChannel+0x9c>
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	6a 95       	dec	r22
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <dio_vidConfigChannel+0x98>
 5d8:	80 95       	com	r24
 5da:	82 23       	and	r24, r18
 5dc:	84 bb       	out	0x14, r24	; 20
 5de:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 5e0:	41 30       	cpi	r20, 0x01	; 1
 5e2:	59 f4       	brne	.+22     	; 0x5fa <dio_vidConfigChannel+0xc2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 5e4:	21 b3       	in	r18, 0x11	; 17
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <dio_vidConfigChannel+0xb8>
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	6a 95       	dec	r22
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <dio_vidConfigChannel+0xb4>
 5f4:	82 2b       	or	r24, r18
 5f6:	81 bb       	out	0x11, r24	; 17
 5f8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 5fa:	21 b3       	in	r18, 0x11	; 17
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 c0       	rjmp	.+4      	; 0x606 <dio_vidConfigChannel+0xce>
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	6a 95       	dec	r22
 608:	e2 f7       	brpl	.-8      	; 0x602 <dio_vidConfigChannel+0xca>
 60a:	80 95       	com	r24
 60c:	82 23       	and	r24, r18
 60e:	81 bb       	out	0x11, r24	; 17
 610:	08 95       	ret

00000612 <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 612:	81 30       	cpi	r24, 0x01	; 1
 614:	01 f1       	breq	.+64     	; 0x656 <dio_vidWriteChannel+0x44>
 616:	30 f0       	brcs	.+12     	; 0x624 <dio_vidWriteChannel+0x12>
 618:	82 30       	cpi	r24, 0x02	; 2
 61a:	b1 f1       	breq	.+108    	; 0x688 <dio_vidWriteChannel+0x76>
 61c:	83 30       	cpi	r24, 0x03	; 3
 61e:	09 f4       	brne	.+2      	; 0x622 <dio_vidWriteChannel+0x10>
 620:	4c c0       	rjmp	.+152    	; 0x6ba <dio_vidWriteChannel+0xa8>
 622:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 624:	41 11       	cpse	r20, r1
 626:	0c c0       	rjmp	.+24     	; 0x640 <dio_vidWriteChannel+0x2e>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 628:	2b b3       	in	r18, 0x1b	; 27
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	02 c0       	rjmp	.+4      	; 0x634 <dio_vidWriteChannel+0x22>
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	6a 95       	dec	r22
 636:	e2 f7       	brpl	.-8      	; 0x630 <dio_vidWriteChannel+0x1e>
 638:	80 95       	com	r24
 63a:	82 23       	and	r24, r18
 63c:	8b bb       	out	0x1b, r24	; 27
 63e:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 640:	2b b3       	in	r18, 0x1b	; 27
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	02 c0       	rjmp	.+4      	; 0x64c <dio_vidWriteChannel+0x3a>
 648:	88 0f       	add	r24, r24
 64a:	99 1f       	adc	r25, r25
 64c:	6a 95       	dec	r22
 64e:	e2 f7       	brpl	.-8      	; 0x648 <dio_vidWriteChannel+0x36>
 650:	82 2b       	or	r24, r18
 652:	8b bb       	out	0x1b, r24	; 27
 654:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 656:	41 11       	cpse	r20, r1
 658:	0c c0       	rjmp	.+24     	; 0x672 <dio_vidWriteChannel+0x60>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 65a:	28 b3       	in	r18, 0x18	; 24
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	02 c0       	rjmp	.+4      	; 0x666 <dio_vidWriteChannel+0x54>
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	6a 95       	dec	r22
 668:	e2 f7       	brpl	.-8      	; 0x662 <dio_vidWriteChannel+0x50>
 66a:	80 95       	com	r24
 66c:	82 23       	and	r24, r18
 66e:	88 bb       	out	0x18, r24	; 24
 670:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 672:	28 b3       	in	r18, 0x18	; 24
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	02 c0       	rjmp	.+4      	; 0x67e <dio_vidWriteChannel+0x6c>
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	6a 95       	dec	r22
 680:	e2 f7       	brpl	.-8      	; 0x67a <dio_vidWriteChannel+0x68>
 682:	82 2b       	or	r24, r18
 684:	88 bb       	out	0x18, r24	; 24
 686:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 688:	41 11       	cpse	r20, r1
 68a:	0c c0       	rjmp	.+24     	; 0x6a4 <dio_vidWriteChannel+0x92>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 68c:	25 b3       	in	r18, 0x15	; 21
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	02 c0       	rjmp	.+4      	; 0x698 <dio_vidWriteChannel+0x86>
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	6a 95       	dec	r22
 69a:	e2 f7       	brpl	.-8      	; 0x694 <dio_vidWriteChannel+0x82>
 69c:	80 95       	com	r24
 69e:	82 23       	and	r24, r18
 6a0:	85 bb       	out	0x15, r24	; 21
 6a2:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 6a4:	25 b3       	in	r18, 0x15	; 21
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <dio_vidWriteChannel+0x9e>
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	6a 95       	dec	r22
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <dio_vidWriteChannel+0x9a>
 6b4:	82 2b       	or	r24, r18
 6b6:	85 bb       	out	0x15, r24	; 21
 6b8:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 6ba:	41 11       	cpse	r20, r1
 6bc:	0c c0       	rjmp	.+24     	; 0x6d6 <dio_vidWriteChannel+0xc4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 6be:	22 b3       	in	r18, 0x12	; 18
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <dio_vidWriteChannel+0xb8>
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	6a 95       	dec	r22
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <dio_vidWriteChannel+0xb4>
 6ce:	80 95       	com	r24
 6d0:	82 23       	and	r24, r18
 6d2:	82 bb       	out	0x12, r24	; 18
 6d4:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 6d6:	22 b3       	in	r18, 0x12	; 18
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <dio_vidWriteChannel+0xd0>
 6de:	88 0f       	add	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	6a 95       	dec	r22
 6e4:	e2 f7       	brpl	.-8      	; 0x6de <dio_vidWriteChannel+0xcc>
 6e6:	82 2b       	or	r24, r18
 6e8:	82 bb       	out	0x12, r24	; 18
 6ea:	08 95       	ret

000006ec <UART_Init>:
	while (*str != '\0')
	{
		UART_TransmitChr(*str);
		str++;
	}
}
 6ec:	2f b7       	in	r18, 0x3f	; 63
 6ee:	20 68       	ori	r18, 0x80	; 128
 6f0:	2f bf       	out	0x3f, r18	; 63
 6f2:	90 bd       	out	0x20, r25	; 32
 6f4:	89 b9       	out	0x09, r24	; 9
 6f6:	8a b1       	in	r24, 0x0a	; 10
 6f8:	80 61       	ori	r24, 0x10	; 16
 6fa:	8a b9       	out	0x0a, r24	; 10
 6fc:	8a b1       	in	r24, 0x0a	; 10
 6fe:	88 60       	ori	r24, 0x08	; 8
 700:	8a b9       	out	0x0a, r24	; 10
 702:	80 b5       	in	r24, 0x20	; 32
 704:	86 6a       	ori	r24, 0xA6	; 166
 706:	80 bd       	out	0x20, r24	; 32
 708:	8a b1       	in	r24, 0x0a	; 10
 70a:	80 68       	ori	r24, 0x80	; 128
 70c:	8a b9       	out	0x0a, r24	; 10
 70e:	8a b1       	in	r24, 0x0a	; 10
 710:	80 64       	ori	r24, 0x40	; 64
 712:	8a b9       	out	0x0a, r24	; 10
 714:	08 95       	ret

00000716 <UART_TransmitChr>:
 716:	8c b9       	out	0x0c, r24	; 12
 718:	08 95       	ret

0000071a <UART_ReceiveChr>:
 71a:	8c b1       	in	r24, 0x0c	; 12
 71c:	08 95       	ret

0000071e <UART_TransmitStr>:

void UART_TransmitStr(u8 *str)
{
 71e:	bc 01       	movw	r22, r24
	u8 i=0;
	/*	copy str into global tx buffer	*/
	for (i=0; i < TX_BUFFER_MAX_SIZE; i++)
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	0b c0       	rjmp	.+22     	; 0x73a <UART_TransmitStr+0x1c>
	{
		tx_buffer[i] = str[i];
 724:	29 2f       	mov	r18, r25
 726:	30 e0       	ldi	r19, 0x00	; 0
 728:	fb 01       	movw	r30, r22
 72a:	e2 0f       	add	r30, r18
 72c:	f3 1f       	adc	r31, r19
 72e:	40 81       	ld	r20, Z
 730:	f9 01       	movw	r30, r18
 732:	e5 5e       	subi	r30, 0xE5	; 229
 734:	fe 4f       	sbci	r31, 0xFE	; 254
 736:	40 83       	st	Z, r20

void UART_TransmitStr(u8 *str)
{
	u8 i=0;
	/*	copy str into global tx buffer	*/
	for (i=0; i < TX_BUFFER_MAX_SIZE; i++)
 738:	9f 5f       	subi	r25, 0xFF	; 255
 73a:	92 33       	cpi	r25, 0x32	; 50
 73c:	98 f3       	brcs	.-26     	; 0x724 <UART_TransmitStr+0x6>
	{
		tx_buffer[i] = str[i];
	}
	UART_TransmitChr(tx_buffer[tx_index]);
 73e:	e0 91 e2 00 	lds	r30, 0x00E2	; 0x8000e2 <tx_index>
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	e5 5e       	subi	r30, 0xE5	; 229
 746:	fe 4f       	sbci	r31, 0xFE	; 254
 748:	80 81       	ld	r24, Z
 74a:	0e 94 8b 03 	call	0x716	; 0x716 <UART_TransmitChr>
 74e:	08 95       	ret

00000750 <uart_Receive_SetCallback>:
}

void uart_Receive_SetCallback(void (*uart_ptr)(void))
{
	ptr_rx_callback = uart_ptr;
 750:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <ptr_rx_callback+0x1>
 754:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <ptr_rx_callback>
 758:	08 95       	ret

0000075a <uart_Transmit_SetCallback>:
}

void uart_Transmit_SetCallback(void (*uart_ptr)(void))
{
	ptr_tx_callback = uart_ptr;
 75a:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <ptr_tx_callback+0x1>
 75e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <ptr_tx_callback>
 762:	08 95       	ret

00000764 <__vector_15>:
}


ISR(USART_TXC_vect)
{
 764:	1f 92       	push	r1
 766:	0f 92       	push	r0
 768:	0f b6       	in	r0, 0x3f	; 63
 76a:	0f 92       	push	r0
 76c:	11 24       	eor	r1, r1
 76e:	2f 93       	push	r18
 770:	3f 93       	push	r19
 772:	4f 93       	push	r20
 774:	5f 93       	push	r21
 776:	6f 93       	push	r22
 778:	7f 93       	push	r23
 77a:	8f 93       	push	r24
 77c:	9f 93       	push	r25
 77e:	af 93       	push	r26
 780:	bf 93       	push	r27
 782:	ef 93       	push	r30
 784:	ff 93       	push	r31
	if (ptr_tx_callback != NULL)
 786:	e0 91 e3 00 	lds	r30, 0x00E3	; 0x8000e3 <ptr_tx_callback>
 78a:	f0 91 e4 00 	lds	r31, 0x00E4	; 0x8000e4 <ptr_tx_callback+0x1>
 78e:	30 97       	sbiw	r30, 0x00	; 0
 790:	09 f0       	breq	.+2      	; 0x794 <__vector_15+0x30>
	{
		ptr_tx_callback();
 792:	09 95       	icall
	}
	/**/
}
 794:	ff 91       	pop	r31
 796:	ef 91       	pop	r30
 798:	bf 91       	pop	r27
 79a:	af 91       	pop	r26
 79c:	9f 91       	pop	r25
 79e:	8f 91       	pop	r24
 7a0:	7f 91       	pop	r23
 7a2:	6f 91       	pop	r22
 7a4:	5f 91       	pop	r21
 7a6:	4f 91       	pop	r20
 7a8:	3f 91       	pop	r19
 7aa:	2f 91       	pop	r18
 7ac:	0f 90       	pop	r0
 7ae:	0f be       	out	0x3f, r0	; 63
 7b0:	0f 90       	pop	r0
 7b2:	1f 90       	pop	r1
 7b4:	18 95       	reti

000007b6 <__vector_13>:


ISR(USART_RXC_vect)
{
 7b6:	1f 92       	push	r1
 7b8:	0f 92       	push	r0
 7ba:	0f b6       	in	r0, 0x3f	; 63
 7bc:	0f 92       	push	r0
 7be:	11 24       	eor	r1, r1
 7c0:	2f 93       	push	r18
 7c2:	3f 93       	push	r19
 7c4:	4f 93       	push	r20
 7c6:	5f 93       	push	r21
 7c8:	6f 93       	push	r22
 7ca:	7f 93       	push	r23
 7cc:	8f 93       	push	r24
 7ce:	9f 93       	push	r25
 7d0:	af 93       	push	r26
 7d2:	bf 93       	push	r27
 7d4:	ef 93       	push	r30
 7d6:	ff 93       	push	r31
		if (ptr_rx_callback != NULL)
 7d8:	e0 91 e5 00 	lds	r30, 0x00E5	; 0x8000e5 <ptr_rx_callback>
 7dc:	f0 91 e6 00 	lds	r31, 0x00E6	; 0x8000e6 <ptr_rx_callback+0x1>
 7e0:	30 97       	sbiw	r30, 0x00	; 0
 7e2:	09 f0       	breq	.+2      	; 0x7e6 <__vector_13+0x30>
		{
			ptr_rx_callback();
 7e4:	09 95       	icall
		}
	
 7e6:	ff 91       	pop	r31
 7e8:	ef 91       	pop	r30
 7ea:	bf 91       	pop	r27
 7ec:	af 91       	pop	r26
 7ee:	9f 91       	pop	r25
 7f0:	8f 91       	pop	r24
 7f2:	7f 91       	pop	r23
 7f4:	6f 91       	pop	r22
 7f6:	5f 91       	pop	r21
 7f8:	4f 91       	pop	r20
 7fa:	3f 91       	pop	r19
 7fc:	2f 91       	pop	r18
 7fe:	0f 90       	pop	r0
 800:	0f be       	out	0x3f, r0	; 63
 802:	0f 90       	pop	r0
 804:	1f 90       	pop	r1
 806:	18 95       	reti

00000808 <TRANSMIT_CALLBACK>:
}


void TRANSMIT_CALLBACK(void)
{
	tx_index++;
 808:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <tx_index>
 80c:	9f 5f       	subi	r25, 0xFF	; 255
 80e:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <tx_index>
	
	if (
	(arr[currnt][tx_index] != '\0') &&
 812:	20 91 e7 00 	lds	r18, 0x00E7	; 0x8000e7 <currnt>
 816:	84 e1       	ldi	r24, 0x14	; 20
 818:	28 9f       	mul	r18, r24
 81a:	f0 01       	movw	r30, r0
 81c:	11 24       	eor	r1, r1
 81e:	e3 5b       	subi	r30, 0xB3	; 179
 820:	fe 4f       	sbci	r31, 0xFE	; 254
 822:	e9 0f       	add	r30, r25
 824:	f1 1d       	adc	r31, r1
 826:	80 81       	ld	r24, Z

void TRANSMIT_CALLBACK(void)
{
	tx_index++;
	
	if (
 828:	88 23       	and	r24, r24
 82a:	29 f0       	breq	.+10     	; 0x836 <TRANSMIT_CALLBACK+0x2e>
	(arr[currnt][tx_index] != '\0') &&
 82c:	92 33       	cpi	r25, 0x32	; 50
 82e:	18 f4       	brcc	.+6      	; 0x836 <TRANSMIT_CALLBACK+0x2e>
	(tx_index < TX_BUFFER_MAX_SIZE)
	)
	{
		UART_TransmitChr(arr[currnt][tx_index]);
 830:	0e 94 8b 03 	call	0x716	; 0x716 <UART_TransmitChr>
 834:	08 95       	ret
	}
	else
	{
		tx_index=0;
 836:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <tx_index>
		currnt++;
 83a:	2f 5f       	subi	r18, 0xFF	; 255
 83c:	20 93 e7 00 	sts	0x00E7, r18	; 0x8000e7 <currnt>
 840:	08 95       	ret

00000842 <RECEIVE_CALLBACK>:
	}
}

void RECEIVE_CALLBACK(void)
{
 842:	cf 93       	push	r28
 844:	df 93       	push	r29
 846:	1f 92       	push	r1
 848:	cd b7       	in	r28, 0x3d	; 61
 84a:	de b7       	in	r29, 0x3e	; 62
	volatile u8 loc_byte=0;
 84c:	19 82       	std	Y+1, r1	; 0x01
	loc_byte = UART_ReceiveChr();
 84e:	0e 94 8d 03 	call	0x71a	; 0x71a <UART_ReceiveChr>
 852:	89 83       	std	Y+1, r24	; 0x01
	
	if (loc_byte != '\r')
 854:	89 81       	ldd	r24, Y+1	; 0x01
 856:	8d 30       	cpi	r24, 0x0D	; 13
 858:	61 f0       	breq	.+24     	; 0x872 <__stack+0x13>
	{
		rx_buffer[rx_index] = loc_byte;
 85a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <rx_index>
 85e:	e8 2f       	mov	r30, r24
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	99 81       	ldd	r25, Y+1	; 0x01
 864:	e7 51       	subi	r30, 0x17	; 23
 866:	ff 4f       	sbci	r31, 0xFF	; 255
 868:	90 83       	st	Z, r25
		rx_index++;
 86a:	8f 5f       	subi	r24, 0xFF	; 255
 86c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <rx_index>
 870:	0b c0       	rjmp	.+22     	; 0x888 <__stack+0x29>
	}
	else
	{
		rx_buffer[rx_index] = '\0';
 872:	e0 91 e1 00 	lds	r30, 0x00E1	; 0x8000e1 <rx_index>
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	e7 51       	subi	r30, 0x17	; 23
 87a:	ff 4f       	sbci	r31, 0xFF	; 255
 87c:	10 82       	st	Z, r1
		rx_index=0;
 87e:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <rx_index>
		mssg_isReceived = TRUE;
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <mssg_isReceived>
	}
	
}
 888:	0f 90       	pop	r0
 88a:	df 91       	pop	r29
 88c:	cf 91       	pop	r28
 88e:	08 95       	ret

00000890 <COM_M_init>:
extern u8 rx_index ;
extern volatile boolean mssg_isReceived;

void COM_M_init(void)
{
  UART_Init(UART_BAUDRATE_9600);
 890:	87 e6       	ldi	r24, 0x67	; 103
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 94 76 03 	call	0x6ec	; 0x6ec <UART_Init>
  uart_Receive_SetCallback(RECEIVE_CALLBACK);
 898:	81 e2       	ldi	r24, 0x21	; 33
 89a:	94 e0       	ldi	r25, 0x04	; 4
 89c:	0e 94 a8 03 	call	0x750	; 0x750 <uart_Receive_SetCallback>
  uart_Transmit_SetCallback(TRANSMIT_CALLBACK);
 8a0:	84 e0       	ldi	r24, 0x04	; 4
 8a2:	94 e0       	ldi	r25, 0x04	; 4
 8a4:	0e 94 ad 03 	call	0x75a	; 0x75a <uart_Transmit_SetCallback>
 8a8:	08 95       	ret

000008aa <COM_M_TransmitStr>:
	
}

void COM_M_TransmitStr(u8 *str)
{
 8aa:	dc 01       	movw	r26, r24
	u8 i=0;
	/*	copy str into global tx buffer	*/
	for (i=0; i < TX_BUFFER_MAX_SIZE; i++)
 8ac:	60 e0       	ldi	r22, 0x00	; 0
 8ae:	13 c0       	rjmp	.+38     	; 0x8d6 <COM_M_TransmitStr+0x2c>
	{
		arr[arr_index][i] = str[i];
 8b0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <arr_index>
 8b4:	46 2f       	mov	r20, r22
 8b6:	50 e0       	ldi	r21, 0x00	; 0
 8b8:	fd 01       	movw	r30, r26
 8ba:	e4 0f       	add	r30, r20
 8bc:	f5 1f       	adc	r31, r21
 8be:	70 81       	ld	r23, Z
 8c0:	84 e1       	ldi	r24, 0x14	; 20
 8c2:	98 9f       	mul	r25, r24
 8c4:	90 01       	movw	r18, r0
 8c6:	11 24       	eor	r1, r1
 8c8:	23 5b       	subi	r18, 0xB3	; 179
 8ca:	3e 4f       	sbci	r19, 0xFE	; 254
 8cc:	f9 01       	movw	r30, r18
 8ce:	e4 0f       	add	r30, r20
 8d0:	f5 1f       	adc	r31, r21
 8d2:	70 83       	st	Z, r23

void COM_M_TransmitStr(u8 *str)
{
	u8 i=0;
	/*	copy str into global tx buffer	*/
	for (i=0; i < TX_BUFFER_MAX_SIZE; i++)
 8d4:	6f 5f       	subi	r22, 0xFF	; 255
 8d6:	62 33       	cpi	r22, 0x32	; 50
 8d8:	58 f3       	brcs	.-42     	; 0x8b0 <COM_M_TransmitStr+0x6>
	{
		arr[arr_index][i] = str[i];
	}
	arr_index++;
 8da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <arr_index>
 8de:	8f 5f       	subi	r24, 0xFF	; 255
 8e0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <arr_index>
	if((currnt<=arr_index) && arr[currnt][0] != '\0' ){
 8e4:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <currnt>
 8e8:	89 17       	cp	r24, r25
 8ea:	70 f1       	brcs	.+92     	; 0x948 <COM_M_TransmitStr+0x9e>
 8ec:	89 2f       	mov	r24, r25
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	24 e1       	ldi	r18, 0x14	; 20
 8f2:	28 9f       	mul	r18, r24
 8f4:	f0 01       	movw	r30, r0
 8f6:	29 9f       	mul	r18, r25
 8f8:	f0 0d       	add	r31, r0
 8fa:	11 24       	eor	r1, r1
 8fc:	e3 5b       	subi	r30, 0xB3	; 179
 8fe:	fe 4f       	sbci	r31, 0xFE	; 254
 900:	20 81       	ld	r18, Z
 902:	22 23       	and	r18, r18
 904:	09 f1       	breq	.+66     	; 0x948 <COM_M_TransmitStr+0x9e>
			UART_TransmitChr(arr[currnt][tx_index]);
 906:	20 91 e2 00 	lds	r18, 0x00E2	; 0x8000e2 <tx_index>
 90a:	34 e1       	ldi	r19, 0x14	; 20
 90c:	38 9f       	mul	r19, r24
 90e:	f0 01       	movw	r30, r0
 910:	39 9f       	mul	r19, r25
 912:	f0 0d       	add	r31, r0
 914:	11 24       	eor	r1, r1
 916:	e3 5b       	subi	r30, 0xB3	; 179
 918:	fe 4f       	sbci	r31, 0xFE	; 254
 91a:	e2 0f       	add	r30, r18
 91c:	f1 1d       	adc	r31, r1
 91e:	80 81       	ld	r24, Z
 920:	0e 94 8b 03 	call	0x716	; 0x716 <UART_TransmitChr>

		
		//check if buffer not empty
		if((CHECK_BIT(UART_UCSRA_REG,UDRE_BIT_NO))){
 924:	5d 99       	sbic	0x0b, 5	; 11
 926:	14 c0       	rjmp	.+40     	; 0x950 <COM_M_TransmitStr+0xa6>
			
		}
		else{
			UART_TransmitChr(arr[currnt][tx_index]);
 928:	e0 91 e7 00 	lds	r30, 0x00E7	; 0x8000e7 <currnt>
 92c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <tx_index>
 930:	94 e1       	ldi	r25, 0x14	; 20
 932:	e9 9f       	mul	r30, r25
 934:	f0 01       	movw	r30, r0
 936:	11 24       	eor	r1, r1
 938:	e3 5b       	subi	r30, 0xB3	; 179
 93a:	fe 4f       	sbci	r31, 0xFE	; 254
 93c:	e8 0f       	add	r30, r24
 93e:	f1 1d       	adc	r31, r1
 940:	80 81       	ld	r24, Z
 942:	0e 94 8b 03 	call	0x716	; 0x716 <UART_TransmitChr>
 946:	08 95       	ret
		}
	}
	else
	{
		UART_TransmitStr("error");
 948:	87 ed       	ldi	r24, 0xD7	; 215
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 94 8f 03 	call	0x71e	; 0x71e <UART_TransmitStr>
 950:	08 95       	ret

00000952 <msg_isrecieved>:
	
}

boolean msg_isrecieved(void)
{
	return mssg_isReceived;
 952:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <mssg_isReceived>
}
 956:	08 95       	ret

00000958 <_exit>:
 958:	f8 94       	cli

0000095a <__stop_program>:
 95a:	ff cf       	rjmp	.-2      	; 0x95a <__stop_program>
